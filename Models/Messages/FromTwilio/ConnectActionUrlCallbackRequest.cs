#nullable enable

using System.Text;

/// <summary>
/// Represents an error.  Usually sent when your app sends an invalid request to the Twilio Conversation Relay service.
/// https://www.twilio.com/docs/voice/twiml/connect/conversationrelay#error-message
/// </summary>
namespace Signal2025AzureConversationRelay.Messages.FromTwilio{
    public class ConnectActionUrlCallbackRequest 
    {
        /// <summary>
        /// Your Twilio account id. It is 34 characters long, and always starts with the letters AC
        /// </summary>
        public string AccountSid { get; set; } = null!;

        /// <summary>
        /// A unique identifier for this call, generated by Twilio
        /// </summary>
        public string CallSid { get; set; } = null!;

        /// <summary>
        /// A descriptive status for the call. The value is one of queued, ringing, in-progress, completed, busy, failed or no-answer
        /// </summary>
        public string CallStatus { get; set; } = null!;

        /// <summary>
        /// The phone number or client identifier of the party that initiated the call
        /// </summary>
        /// <remarks>
        /// Phone numbers are formatted with a '+' and country code, e.g. +16175551212 (E.164 format). Client identifiers begin with the client: URI scheme; for example, for a call from a client named 'tommy', the From parameter will be client:tommy.
        /// </remarks>
        public string From { get; set; } = null!;
            
        /// <summary>
        /// The phone number or client identifier of the called party
        /// </summary>
        /// <remarks>
        /// Phone numbers are formatted with a '+' and country code, e.g. +16175551212 (E.164 format). Client identifiers begin with the client: URI scheme; for example, for a call to a client named 'jenny', the To parameter will be client:jenny.
        /// </remarks>
        public string To { get; set; } = null!;

        /// <summary>
        /// Indicates the direction of the call. In most cases this will be inbound, but if you are using Dial it will be outbound-dial
        /// </summary>
        public string Direction { get; set; } = null!;
        
        /// <summary>
        /// A unique identifier for the application 
        /// </summary>
        public string? ApplicationSid { get; set; }

        /// <summary>
        /// A unique identifier for the Conversation Relay Session 
        /// </summary>
        public string? SessionId { get; set; }

        /// <summary>
        /// The status of the session: ended, failed, completed, in-progress
        /// </summary>
        public string? SessionStatus { get; set; }

        /// <summary>
        /// Duration of the Conversation Relay Session 
        /// </summary>
        public string? SessionDuration { get; set; }

        /// <summary>
        /// Error Code from the Conversation Relay Session 
        /// </summary>
        public string? ErrorCode { get; set; }

        /// <summary>
        /// Error Message from the Conversation Relay Session 
        /// </summary>
        public string? ErrorMessage { get; set; }

        /// <summary>
        /// The string of escaped JSON returned from an End session message in Conversation Relay
        /// https://www.twilio.com/docs/voice/twiml/connect/conversationrelay#end-session-message
        /// https://www.twilio.com/docs/voice/twiml/connect/conversationrelay#connect-action-url-callback
        /// </summary>
        public string? HandoffData { get; set; }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"AccountSid: {AccountSid}");
            sb.AppendLine($"CallSid: {CallSid}");
            sb.AppendLine($"CallStatus: {CallStatus}");
            sb.AppendLine($"From: {From}");
            sb.AppendLine($"To: {To}");
            sb.AppendLine($"Direction: {Direction}");
            sb.AppendLine($"ApplicationSid: {ApplicationSid}");
            sb.AppendLine($"SessionId: {SessionId}");
            sb.AppendLine($"SessionStatus: {SessionStatus}");
            sb.AppendLine($"SessionDuration: {SessionDuration}");
            sb.AppendLine($"ErrorCode: {ErrorCode}");
            sb.AppendLine($"ErrorMessage: {ErrorMessage}");
            sb.AppendLine($"HandoffData: {HandoffData}");
            return sb.ToString();
        }
    }
}
